name: Build Wheels

on:
  push:
    branches: 'master'
    tags: 'v*.*.*'
  workflow_dispatch:

jobs:
  Build-Wheels:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15, ubuntu-24.04-arm, ubuntu-latest, windows-latest]
        archs: [auto64]
        manylinux-image: [manylinux_2_28]
        # Build with both x86-64 (macos-13) and ARM64 (macos-14) runners.
        # For some reason, macos-14-latest seems to use macos-14-arm64, but when I try to specify macos-14-arm64
        # directly, then the actions does not find any runner to run on and macos-14 also uses arm64...
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md
        #
        # manylinux1 is not supported anymore because it won't compile C++17 code
        # manylinux_2_24, which is newer than manylinux2014, is not supported because it comes with GCC 5.3,
        # which cannot compile C++17 code. Just why?
        # https://github.com/pypa/manylinux/issues/1012
        # manylinux_2_28 has GCC 11 :3 but it has dropped support for i686 (x86 32-bit).
        # manylinux2010 runs into this problem https://github.com/pypa/cibuildwheel/issues/1001
        # MacOS and Windows ignore the manylinux-image version because they are not Linux.
        include:
        - os: ubuntu-latest
          manylinux-image: manylinux_2_28
          archs: auto32

    env:
      MACOSX_DEPLOYMENT_TARGET: "13.0"

    steps:
    - name: System Information
      if: "! startsWith(matrix.os, 'windows')"
      run: |
        uname -a

    - name: Print Architecture
      if: "startsWith(matrix.os, 'macos')"
      run: |
        sysctl -n machdep.cpu.brand_string
        arch

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Dependencies
      # cibuildwheel-2.23.3 fails with:
      # Building cp38-macosx_arm64 wheel
      # Download https://github.com/pypa/get-virtualenv/blob/20.30.0/public/virtualenv.pyz?raw=true
      #  -> fails because it is 404 now :( This means I have to drop Python 3.8 support.
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cython twine cibuildwheel~=3.0 build

    - name: Build Tarball
      working-directory: python/indexed_bzip2
      run: python3 -m build --sdist

    - name: Build Wheels
      env:
        CIBW_ARCHS: ${{ matrix.archs }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux-image }}
        CIBW_ENABLE: "pypy"
        # Skip cp14 because it is not time yet to release wheels and because cp14t has problems:
        # https://github.com/pypa/cibuildwheel/issues/2531#issuecomment-3168087550
        CIBW_SKIP: "*cp31[4-9]*"
      run: python -m cibuildwheel --output-dir dist python/indexed_bzip2

    - name: Check Wheels
      run: twine check dist/*

    - uses: actions/upload-artifact@v4
      if: "startsWith(matrix.os, 'windows') && matrix.archs == 'auto64'"
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.archs }}
        path: "dist/*-cp31*.whl"

    - name: Publish Tarball to PyPI
      # Only one out of the OS matrix needs to upload the tarball.
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest' && matrix.archs == 'auto64' && matrix.manylinux-image == 'manylinux_2_28'
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      working-directory: python/indexed_bzip2
      run: twine upload --skip-existing -u __token__ dist/*

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: twine upload --skip-existing -u __token__ dist/*
